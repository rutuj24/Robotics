import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
import time

class SquareController(Node):
    def __init__(self):
        super().__init__('square_controller')
        self.publisher_ = self.create_publisher(Twist, 'cmd_vel', 10)
        
        # Parameters for the square
        self.side_length = 1.0  # meters
        self.linear_speed = 0.2  # m/s
        self.angular_speed = 0.5  # rad/s
        
        # Time calculations
        self.forward_duration = self.side_length / self.linear_speed
        self.turn_duration = 1.5708 / self.angular_speed # 90 degrees in radians is pi/2 â‰ˆ 1.5708
        
        self.get_logger().info('Square Controller Node has been started.')
        self.get_logger().info(f'Side length: {self.side_length}m, Linear speed: {self.linear_speed}m/s')
        self.get_logger().info(f'Move forward for {self.forward_duration:.2f}s, then turn for {self.turn_duration:.2f}s.')

        # Start the movement pattern
        self.move_square()

    def publish_cmd(self, linear_x, angular_z):
        """Publishes a Twist message with specified linear and angular velocities."""
        msg = Twist()
        msg.linear.x = linear_x
        msg.angular.z = angular_z
        self.publisher_.publish(msg)

    def move_square(self):
        """Executes the sequence of movements to form a square."""
        self.get_logger().info('Starting square movement...')
        
        # Loop to create 4 sides of the square
        for i in range(4):
            # Move forward
            self.get_logger().info(f'Moving forward for side {i+1}')
            self.publish_cmd(self.linear_speed, 0.0)
            time.sleep(self.forward_duration)
            
            # Stop before turning
            self.publish_cmd(0.0, 0.0)
            time.sleep(1.0) # A brief pause
            
            # Turn
            self.get_logger().info(f'Turning for corner {i+1}')
            self.publish_cmd(0.0, self.angular_speed)
            time.sleep(self.turn_duration)
            
            # Stop after turning
            self.publish_cmd(0.0, 0.0)
            time.sleep(1.0) # A brief pause

        self.get_logger().info('Square complete. Shutting down.')
        # Ensure the robot is stopped at the end
        self.publish_cmd(0.0, 0.0)
        rclpy.shutdown()

def main(args=None):
    rclpy.init(args=args)
    square_controller = SquareController()
    # The SquareController's move_square method will run until completion and then shutdown.
    # No need for rclpy.spin() here as the logic is sequential and finite.
    
if __name__ == '__main__':
    main()