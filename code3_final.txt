import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
import time

class SquareController(Node):
    def __init__(self):
        super().__init__('square_controller')
        self.publisher_ = self.create_publisher(Twist, 'cmd_vel', 10)
        
        # Parameters for the square
        self.side_length = 1.25  # meters
        self.linear_speed = 0.2  # m/s
        self.angular_speed = 0.5  # rad/s
        
        # Time calculations
        self.forward_duration = self.side_length / self.linear_speed
        self.turn_duration = 1.5708 / self.angular_speed # 90 degrees in radians is pi/2 â‰ˆ 1.5708
        
        # Start the movement pattern
        self.move_square()

    def publish_cmd(self, linear_x, angular_z):
        """Publishes a Twist message with specified linear and angular velocities."""
        msg = Twist()
        msg.linear.x = linear_x
        msg.angular.z = angular_z
        self.publisher_.publish(msg)

    def move_square(self):
        """Executes the sequence of movements to form a square."""
        self.get_logger().info('Starting square movement...')
        time.sleep(1.0)
        a=0
        while a<100:
            # Loop to create 4 sides of the square
            for i in range(4):
                # Move forward
                self.get_logger().info(f'Moving forward for side {i+1}')
                self.publish_cmd(self.linear_speed, 0.0)
                time.sleep(self.forward_duration)
                
                # Stop before turning
                self.publish_cmd(0.0, 0.0)
                time.sleep(1.0) # A brief pause
                
                # Turn
                self.get_logger().info(f'Turning for corner {i+1}')
                self.publish_cmd(0.0, self.angular_speed)
                time.sleep(self.turn_duration)
                
                # Stop after turning
                self.publish_cmd(0.0, 0.0)
                time.sleep(1.0) # A brief pause
            a=a+1

def main(args=None):
    rclpy.init(args=args)
    square_controller = SquareController()
    rclpy.spin(square_controller)

    square_controller.destroy_node()
    rclpy.shutdown()
    
if __name__ == '__main__':
    main()
